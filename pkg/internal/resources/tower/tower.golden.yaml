- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.2.9
    creationTimestamp: null
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: managementclusters.master.kubecarrier.io
  spec:
    group: master.kubecarrier.io
    names:
      kind: ManagementCluster
      listKind: ManagementClusterList
      plural: managementclusters
      singular: managementcluster
    scope: Cluster
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Status
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ManagementCluster represents a management cluster which has
            KubeCarrier installation running on it.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ManagementClusterSpec defines the desired state of ManagementCluster.
              properties:
                kubeconfigSecret:
                  description: KubeconfigSecret specifies the Kubeconfig to use when
                    connecting to the Management Cluster.
                  properties:
                    name:
                      minLength: 1
                      type: string
                  required:
                  - name
                  type: object
              type: object
            status:
              description: ManagementClusterStatus defines the observed state of ManagementCluster.
              properties:
                conditions:
                  description: Conditions represents the latest available observations
                    of a ManagementCluster's current state.
                  items:
                    description: ManagementClusterCondition contains details for the
                      current condition of this ManagementCluster.
                    properties:
                      lastHeartbeatTime:
                        description: LastHeartbeatTime is the timestamp corresponding
                          to the last update of this condition.
                        format: date-time
                        type: string
                      lastTransitionTime:
                        description: LastTransitionTime is the last time the condition
                          transits from one status to another.
                        format: date-time
                        type: string
                      message:
                        description: Message is the human readable message indicating
                          details about last transition.
                        type: string
                      reason:
                        description: Reason is the (brief) reason for the condition's
                          last transition.
                        type: string
                      status:
                        description: Status is the status of the condition, one of
                          ('True', 'False', 'Unknown').
                        type: string
                      type:
                        description: Type is the type of the ManagementCluster condition,
                          currently ('Ready').
                        type: string
                    required:
                    - lastHeartbeatTime
                    - lastTransitionTime
                    - message
                    - reason
                    - status
                    - type
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the most recent generation observed
                    for this ManagementCluster by the controller.
                  format: int64
                  type: integer
                phase:
                  description: DEPRECATED. Phase represents the current lifecycle
                    state of this object. Consider this field DEPRECATED, it will
                    be removed as soon as there is a mechanism to map conditions to
                    strings when printing the property. This is only for display purpose,
                    for everything else use conditions.
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: ""
      plural: ""
    conditions: []
    storedVersions: []
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    creationTimestamp: null
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-manager-role
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - master.kubecarrier.io
    resources:
    - managementclusters
    verbs:
    - get
    - list
    - update
    - watch
  - apiGroups:
    - master.kubecarrier.io
    resources:
    - managementclusters/status
    verbs:
    - get
    - patch
    - update
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-sa
    namespace: test3000
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-manager-rolebinding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kubecarrier-tower-manager-role
  subjects:
  - kind: ServiceAccount
    name: kubecarrier-tower-sa
    namespace: test3000
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-leader-election-role
    namespace: test3000
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
  - apiGroups:
    - ""
    resources:
    - configmaps/status
    verbs:
    - get
    - update
    - patch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-leader-election-rolebinding
    namespace: test3000
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: kubecarrier-tower-leader-election-role
  subjects:
  - kind: ServiceAccount
    name: kubecarrier-tower-sa
    namespace: test3000
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      control-plane: tower
      kubecarrier.io/role: tower
    name: kubecarrier-tower-manager
    namespace: test3000
  spec:
    replicas: 1
    selector:
      matchLabels:
        control-plane: tower
        kubecarrier.io/role: tower
    template:
      metadata:
        labels:
          control-plane: tower
          kubecarrier.io/role: tower
      spec:
        containers:
        - image: quay.io/kubecarrier/tower:was not build properly
          livenessProbe:
            httpGet:
              path: /healthz
              port: readiness-port
          name: manager
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          - containerPort: 9440
            name: readiness-port
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: readiness-port
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
        serviceAccountName: kubecarrier-tower-sa
        terminationGracePeriodSeconds: 10
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: kubecarrier-tower-webhook-service-webhook-service-cert
- apiVersion: admissionregistration.k8s.io/v1beta1
  kind: ValidatingWebhookConfiguration
  metadata:
    annotations:
      cert-manager.io/inject-ca-from: test3000/kubecarrier-tower-serving-cert
    creationTimestamp: null
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-validating-webhook-configuration
  webhooks:
  - clientConfig:
      caBundle: Cg==
      service:
        name: kubecarrier-tower-webhook-service
        namespace: test3000
        path: /validate-master-kubecarrier-io-v1alpha1-managementcluster
    failurePolicy: Fail
    name: vmanagementcluster.kubecarrier.io
    rules:
    - apiGroups:
      - master.kubecarrier.io
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      resources:
      - managementclusters
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-webhook-service
    namespace: test3000
  spec:
    ports:
    - port: 443
      targetPort: 9443
    selector:
      control-plane: tower
      kubecarrier.io/role: tower
- apiVersion: cert-manager.io/v1alpha2
  kind: Issuer
  metadata:
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-selfsigned-issuer
    namespace: test3000
  spec:
    selfSigned: {}
- apiVersion: cert-manager.io/v1alpha2
  kind: Certificate
  metadata:
    labels:
      app.kubernetes.io/instance: test3000
      app.kubernetes.io/managed-by: kubecarrier-operator
      app.kubernetes.io/name: tower
      app.kubernetes.io/version: was not build properly
      kubecarrier.io/role: tower
    name: kubecarrier-tower-serving-cert
    namespace: test3000
  spec:
    dnsNames:
    - kubecarrier-tower-webhook-service.test3000.svc
    - kubecarrier-tower-webhook-service.test3000.svc.cluster.local
    issuerRef:
      kind: Issuer
      name: kubecarrier-tower-selfsigned-issuer
    secretName: kubecarrier-tower-webhook-service-webhook-service-cert
